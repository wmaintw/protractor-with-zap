apply plugin: "idea"
apply plugin: "java"
apply plugin: "security-zap"
//apply plugin: "dependency-check"

buildscript {
    repositories {
//        maven {
//            url uri('../../repo')
//        }
        maven {
            url 'http://dl.bintray.com/wei/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath(
                'com.thoughtworks.tools:security-zap:1.0.5',
                'com.tools.security:dependency-check:0.0.2'
        )
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "dependency-check"

    repositories {
        mavenCentral()
    }

    dependencyCheck {
//        proxyServer = "127.0.0.1"
//        proxyPort = 3128
//    proxyUsername = "username"
//    proxyPassword = "password"
    }
}

subprojects {

}

zap {
    server {
        // required, absolute path to the ZAP install folder
        home = "/Users/wma/Downloads/security/zap-for-linux/ZAP_2.3.1"

        port = 8083
    }

    target {
        // required, the website to be tested against ZAP
        url = "http://juliemr.github.io/protractor-demo"

        // optional, urls match these rege will be ignored from ZAP, default to no exclusion
        exclude = ['.*/css/.*', '.*/js/.*', '.*/fonts/.*', ".*\\.css", ".*\\.js"]
    }

    scan {
        // optional, before scan, ZAP will crawl from here first, default to zap.target.url
        crawlFrom = "http://juliemr.github.io/protractor-demo"

        // optional, urls match these regex will be ignored from scan, default to no exclusion
        exclude = ['.*/css/.*', '.*/js/.*', '.*/fonts/.*', ".*\\.css", ".*\\.js"]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile(
            'org.apache.struts:struts2-core:2.3.12',
            'org.apache.directory.studio:org.apache.commons.pool:1.6',
            'com.kenai.nbpwr:org-apache-commons-dbcp:1.2.2-201002241055'
    )
}

task getAllDependencies(type: Copy) {
    from sourceSets.main.compileClasspath
    into 'allLibs/'
}

task cleanDownloadedDependencies(type: Delete) {
    delete 'allLibs'
}

getAllDependencies.dependsOn cleanDownloadedDependencies